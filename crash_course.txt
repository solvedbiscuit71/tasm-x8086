- assembly is the human readable form of machine code.
- everything in assembly is binary. difference araises from interpretation.
- even an addresses is just a binary number.
- .data section contains the global variables
- .code section contains the instruction
- assembler converts .asm -> .obj
- linker converts .obj -> .exe

REGISTER
- hardware implemented variables (fixed)
- to perform operation, we need to load data into registers and perform operation on registers
- ax, bx, cx, dx are general purpose registers
    - ax ( lower 16 bit of eax )
    - ah ( upper 8 bit of ax )
    - al ( lower 8 bit of ax )
- si, di are used to copy large data
- sp, bp are used for stack related operation

OPERAND
- atmost one operand can be a memory location.
- operand fetching happens during instruction decoding.

MOVE
- mov dest, src

BITWISE
- and dest, src
- xor
- or
- test dest, src

ARITHMETIC
add dest, src
sub dest, src
mul bx  ; dx:ax = ax * bx
div bx  ; ax Rdx = dx:ax / bx

FLAG (1=yes, 0=no)
- CF - carry over?
- OF - overflow?
- ZF - result is zero?
- SF - result is signed?
- PF - is even parity?

JUMP
cmp ax, bx		; perform ax - bx and updates flags
jmp label		; unconditional jump
je label		; conditional jump ZF=1
jne label

CALL
call label		; push ip, jmp label
ret				; pop ip

SHIFT and ROTATE
shifted bit -> CF
shr dest, count
shl dest, count
sal dest, count
sar dest, count
ror 
rol

SYSTEM CALL
mov ah, 01H ; char input -> al
mov ah, 02H ; char output <- dl
mov ah, 09H ; string output <- dx
mov ah, 0AH ; string input <- dx, buf = buffer-size input-size data...
mov ah, 4CH ; terminate
int 21H
